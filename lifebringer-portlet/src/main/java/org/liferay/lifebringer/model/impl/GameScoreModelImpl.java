package org.liferay.lifebringer.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.liferay.lifebringer.model.GameScore;
import org.liferay.lifebringer.model.GameScoreModel;
import org.liferay.lifebringer.model.GameScoreSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the GameScore service. Represents a row in the &quot;lifebringer_GameScore&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.liferay.lifebringer.model.GameScoreModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link GameScoreImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see GameScoreImpl
 * @see org.liferay.lifebringer.model.GameScore
 * @see org.liferay.lifebringer.model.GameScoreModel
 * @generated
 */
@JSON(strict = true)
public class GameScoreModelImpl extends BaseModelImpl<GameScore>
    implements GameScoreModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a game score model instance should use the {@link org.liferay.lifebringer.model.GameScore} interface instead.
     */
    public static final String TABLE_NAME = "lifebringer_GameScore";
    public static final Object[][] TABLE_COLUMNS = {
            { "gameId", Types.BIGINT },
            { "groupId", Types.BIGINT },
            { "companyId", Types.BIGINT },
            { "userId", Types.BIGINT },
            { "userName", Types.VARCHAR },
            { "createDate", Types.TIMESTAMP },
            { "modifiedDate", Types.TIMESTAMP },
            { "gameTime", Types.INTEGER },
            { "gameScore", Types.INTEGER },
            { "redZombiesKilled", Types.INTEGER },
            { "greenZombiesKilled", Types.INTEGER },
            { "missed", Types.INTEGER },
            { "fired", Types.INTEGER },
            { "level", Types.INTEGER }
        };
    public static final String TABLE_SQL_CREATE = "create table lifebringer_GameScore (gameId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,gameTime INTEGER,gameScore INTEGER,redZombiesKilled INTEGER,greenZombiesKilled INTEGER,missed INTEGER,fired INTEGER,level INTEGER)";
    public static final String TABLE_SQL_DROP = "drop table lifebringer_GameScore";
    public static final String ORDER_BY_JPQL = " ORDER BY gameScore.createDate DESC";
    public static final String ORDER_BY_SQL = " ORDER BY lifebringer_GameScore.createDate DESC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.org.liferay.lifebringer.model.GameScore"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.org.liferay.lifebringer.model.GameScore"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.org.liferay.lifebringer.model.GameScore"),
            true);
    public static long GROUPID_COLUMN_BITMASK = 1L;
    public static long USERID_COLUMN_BITMASK = 2L;
    public static long CREATEDATE_COLUMN_BITMASK = 4L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.org.liferay.lifebringer.model.GameScore"));
    private static ClassLoader _classLoader = GameScore.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            GameScore.class
        };
    private long _gameId;
    private long _groupId;
    private long _originalGroupId;
    private boolean _setOriginalGroupId;
    private long _companyId;
    private long _userId;
    private String _userUuid;
    private long _originalUserId;
    private boolean _setOriginalUserId;
    private String _userName;
    private Date _createDate;
    private Date _modifiedDate;
    private int _gameTime;
    private int _gameScore;
    private int _redZombiesKilled;
    private int _greenZombiesKilled;
    private int _missed;
    private int _fired;
    private int _level;
    private long _columnBitmask;
    private GameScore _escapedModel;

    public GameScoreModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static GameScore toModel(GameScoreSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        GameScore model = new GameScoreImpl();

        model.setGameId(soapModel.getGameId());
        model.setGroupId(soapModel.getGroupId());
        model.setCompanyId(soapModel.getCompanyId());
        model.setUserId(soapModel.getUserId());
        model.setUserName(soapModel.getUserName());
        model.setCreateDate(soapModel.getCreateDate());
        model.setModifiedDate(soapModel.getModifiedDate());
        model.setGameTime(soapModel.getGameTime());
        model.setGameScore(soapModel.getGameScore());
        model.setRedZombiesKilled(soapModel.getRedZombiesKilled());
        model.setGreenZombiesKilled(soapModel.getGreenZombiesKilled());
        model.setMissed(soapModel.getMissed());
        model.setFired(soapModel.getFired());
        model.setLevel(soapModel.getLevel());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<GameScore> toModels(GameScoreSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<GameScore> models = new ArrayList<GameScore>(soapModels.length);

        for (GameScoreSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _gameId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setGameId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _gameId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return GameScore.class;
    }

    @Override
    public String getModelClassName() {
        return GameScore.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("gameId", getGameId());
        attributes.put("groupId", getGroupId());
        attributes.put("companyId", getCompanyId());
        attributes.put("userId", getUserId());
        attributes.put("userName", getUserName());
        attributes.put("createDate", getCreateDate());
        attributes.put("modifiedDate", getModifiedDate());
        attributes.put("gameTime", getGameTime());
        attributes.put("gameScore", getGameScore());
        attributes.put("redZombiesKilled", getRedZombiesKilled());
        attributes.put("greenZombiesKilled", getGreenZombiesKilled());
        attributes.put("missed", getMissed());
        attributes.put("fired", getFired());
        attributes.put("level", getLevel());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long gameId = (Long) attributes.get("gameId");

        if (gameId != null) {
            setGameId(gameId);
        }

        Long groupId = (Long) attributes.get("groupId");

        if (groupId != null) {
            setGroupId(groupId);
        }

        Long companyId = (Long) attributes.get("companyId");

        if (companyId != null) {
            setCompanyId(companyId);
        }

        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        String userName = (String) attributes.get("userName");

        if (userName != null) {
            setUserName(userName);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }

        Integer gameTime = (Integer) attributes.get("gameTime");

        if (gameTime != null) {
            setGameTime(gameTime);
        }

        Integer gameScore = (Integer) attributes.get("gameScore");

        if (gameScore != null) {
            setGameScore(gameScore);
        }

        Integer redZombiesKilled = (Integer) attributes.get("redZombiesKilled");

        if (redZombiesKilled != null) {
            setRedZombiesKilled(redZombiesKilled);
        }

        Integer greenZombiesKilled = (Integer) attributes.get(
                "greenZombiesKilled");

        if (greenZombiesKilled != null) {
            setGreenZombiesKilled(greenZombiesKilled);
        }

        Integer missed = (Integer) attributes.get("missed");

        if (missed != null) {
            setMissed(missed);
        }

        Integer fired = (Integer) attributes.get("fired");

        if (fired != null) {
            setFired(fired);
        }

        Integer level = (Integer) attributes.get("level");

        if (level != null) {
            setLevel(level);
        }
    }

    @JSON
    @Override
    public long getGameId() {
        return _gameId;
    }

    @Override
    public void setGameId(long gameId) {
        _gameId = gameId;
    }

    @JSON
    @Override
    public long getGroupId() {
        return _groupId;
    }

    @Override
    public void setGroupId(long groupId) {
        _columnBitmask |= GROUPID_COLUMN_BITMASK;

        if (!_setOriginalGroupId) {
            _setOriginalGroupId = true;

            _originalGroupId = _groupId;
        }

        _groupId = groupId;
    }

    public long getOriginalGroupId() {
        return _originalGroupId;
    }

    @JSON
    @Override
    public long getCompanyId() {
        return _companyId;
    }

    @Override
    public void setCompanyId(long companyId) {
        _companyId = companyId;
    }

    @JSON
    @Override
    public long getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(long userId) {
        _columnBitmask |= USERID_COLUMN_BITMASK;

        if (!_setOriginalUserId) {
            _setOriginalUserId = true;

            _originalUserId = _userId;
        }

        _userId = userId;
    }

    @Override
    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    @Override
    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    public long getOriginalUserId() {
        return _originalUserId;
    }

    @JSON
    @Override
    public String getUserName() {
        if (_userName == null) {
            return StringPool.BLANK;
        } else {
            return _userName;
        }
    }

    @Override
    public void setUserName(String userName) {
        _userName = userName;
    }

    @JSON
    @Override
    public Date getCreateDate() {
        return _createDate;
    }

    @Override
    public void setCreateDate(Date createDate) {
        _columnBitmask = -1L;

        _createDate = createDate;
    }

    @JSON
    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    @JSON
    @Override
    public int getGameTime() {
        return _gameTime;
    }

    @Override
    public void setGameTime(int gameTime) {
        _gameTime = gameTime;
    }

    @JSON
    @Override
    public int getGameScore() {
        return _gameScore;
    }

    @Override
    public void setGameScore(int gameScore) {
        _gameScore = gameScore;
    }

    @JSON
    @Override
    public int getRedZombiesKilled() {
        return _redZombiesKilled;
    }

    @Override
    public void setRedZombiesKilled(int redZombiesKilled) {
        _redZombiesKilled = redZombiesKilled;
    }

    @JSON
    @Override
    public int getGreenZombiesKilled() {
        return _greenZombiesKilled;
    }

    @Override
    public void setGreenZombiesKilled(int greenZombiesKilled) {
        _greenZombiesKilled = greenZombiesKilled;
    }

    @JSON
    @Override
    public int getMissed() {
        return _missed;
    }

    @Override
    public void setMissed(int missed) {
        _missed = missed;
    }

    @JSON
    @Override
    public int getFired() {
        return _fired;
    }

    @Override
    public void setFired(int fired) {
        _fired = fired;
    }

    @JSON
    @Override
    public int getLevel() {
        return _level;
    }

    @Override
    public void setLevel(int level) {
        _level = level;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
            GameScore.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public GameScore toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (GameScore) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        GameScoreImpl gameScoreImpl = new GameScoreImpl();

        gameScoreImpl.setGameId(getGameId());
        gameScoreImpl.setGroupId(getGroupId());
        gameScoreImpl.setCompanyId(getCompanyId());
        gameScoreImpl.setUserId(getUserId());
        gameScoreImpl.setUserName(getUserName());
        gameScoreImpl.setCreateDate(getCreateDate());
        gameScoreImpl.setModifiedDate(getModifiedDate());
        gameScoreImpl.setGameTime(getGameTime());
        gameScoreImpl.setGameScore(getGameScore());
        gameScoreImpl.setRedZombiesKilled(getRedZombiesKilled());
        gameScoreImpl.setGreenZombiesKilled(getGreenZombiesKilled());
        gameScoreImpl.setMissed(getMissed());
        gameScoreImpl.setFired(getFired());
        gameScoreImpl.setLevel(getLevel());

        gameScoreImpl.resetOriginalValues();

        return gameScoreImpl;
    }

    @Override
    public int compareTo(GameScore gameScore) {
        int value = 0;

        value = DateUtil.compareTo(getCreateDate(), gameScore.getCreateDate());

        value = value * -1;

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof GameScore)) {
            return false;
        }

        GameScore gameScore = (GameScore) obj;

        long primaryKey = gameScore.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        GameScoreModelImpl gameScoreModelImpl = this;

        gameScoreModelImpl._originalGroupId = gameScoreModelImpl._groupId;

        gameScoreModelImpl._setOriginalGroupId = false;

        gameScoreModelImpl._originalUserId = gameScoreModelImpl._userId;

        gameScoreModelImpl._setOriginalUserId = false;

        gameScoreModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<GameScore> toCacheModel() {
        GameScoreCacheModel gameScoreCacheModel = new GameScoreCacheModel();

        gameScoreCacheModel.gameId = getGameId();

        gameScoreCacheModel.groupId = getGroupId();

        gameScoreCacheModel.companyId = getCompanyId();

        gameScoreCacheModel.userId = getUserId();

        gameScoreCacheModel.userName = getUserName();

        String userName = gameScoreCacheModel.userName;

        if ((userName != null) && (userName.length() == 0)) {
            gameScoreCacheModel.userName = null;
        }

        Date createDate = getCreateDate();

        if (createDate != null) {
            gameScoreCacheModel.createDate = createDate.getTime();
        } else {
            gameScoreCacheModel.createDate = Long.MIN_VALUE;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            gameScoreCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            gameScoreCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        gameScoreCacheModel.gameTime = getGameTime();

        gameScoreCacheModel.gameScore = getGameScore();

        gameScoreCacheModel.redZombiesKilled = getRedZombiesKilled();

        gameScoreCacheModel.greenZombiesKilled = getGreenZombiesKilled();

        gameScoreCacheModel.missed = getMissed();

        gameScoreCacheModel.fired = getFired();

        gameScoreCacheModel.level = getLevel();

        return gameScoreCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(29);

        sb.append("{gameId=");
        sb.append(getGameId());
        sb.append(", groupId=");
        sb.append(getGroupId());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", userName=");
        sb.append(getUserName());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append(", gameTime=");
        sb.append(getGameTime());
        sb.append(", gameScore=");
        sb.append(getGameScore());
        sb.append(", redZombiesKilled=");
        sb.append(getRedZombiesKilled());
        sb.append(", greenZombiesKilled=");
        sb.append(getGreenZombiesKilled());
        sb.append(", missed=");
        sb.append(getMissed());
        sb.append(", fired=");
        sb.append(getFired());
        sb.append(", level=");
        sb.append(getLevel());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(46);

        sb.append("<model><model-name>");
        sb.append("org.liferay.lifebringer.model.GameScore");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>gameId</column-name><column-value><![CDATA[");
        sb.append(getGameId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupId</column-name><column-value><![CDATA[");
        sb.append(getGroupId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userName</column-name><column-value><![CDATA[");
        sb.append(getUserName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>gameTime</column-name><column-value><![CDATA[");
        sb.append(getGameTime());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>gameScore</column-name><column-value><![CDATA[");
        sb.append(getGameScore());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>redZombiesKilled</column-name><column-value><![CDATA[");
        sb.append(getRedZombiesKilled());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>greenZombiesKilled</column-name><column-value><![CDATA[");
        sb.append(getGreenZombiesKilled());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>missed</column-name><column-value><![CDATA[");
        sb.append(getMissed());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>fired</column-name><column-value><![CDATA[");
        sb.append(getFired());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>level</column-name><column-value><![CDATA[");
        sb.append(getLevel());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
